/*
 * The Hack CPU (Central Processing unit), consisting of:
 *     1. an ALU,
 *     2. two registers named A and D,
 *     3. a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// A register
	Not(in=instruction[15],out=NotInstruction15);
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=ARegisterIn);
	Or(a=NotInstruction15, b=instruction[5], out=ARegisterLoad);
	Register(in=ARegisterIn, load=ARegisterLoad, out=ARegisterOut);

	// D register
	Register(in=ALUout, load=instruction[4], out=DRegisterOut);

	// M memory
	Or16(a=ALUout, b=ALUout, out=outM);
	Or(a=instruction[3], b=instruction[3], out=writeM);
	Or16(a=ARegisterOut, b=ARegisterOut, out[0..14]=addressM);

	// pc
	Not(in=ALUng, out=NotALUng)
	And(a=instruction[0], b=NotALUng, out=posjmp);
	And(a=instruction[1], b=ALUzr, out=zerojmp);
	And(a=instruction[2], b=ALUng, out=negjmp);
	Or(a=posjmp, b=zerojmp, out=posjmpORzerojmp);
	Or(a=posjmpORzerojmp, b=negjmp, out=posjmpORzerojmpORnegjmp);
	PC(in=ARegisterOut, load=posjmpORzerojmpORnegjmp, inc=true, reset=reset, out[0..14]=pc);

}
