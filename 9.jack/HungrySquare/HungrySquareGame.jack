/**
 * Implements the Hungry Square game.
 * User should move the big square towards the small squares in order to get bigger.
 */

class HungrySquareGame {
	field Square square; // the square of this game
	field int direction; // the square's current direction:
						// 0=none, 1=up, 2=down, 3=left, 4=right
	field Array edibleSquares; //squares to be eaten by the main square
	field int movesCount, esLength;

	/** Constructs a new Square Game. */
	constructor HungrySquareGame new() {
		// Creates a 30 by 30 pixels square and positions it at the top-left
		// of the screen.
		let square = Square.new(0, 0, 10);
		let direction = 0;	// initial state is no movement
		let edibleSquares = Array.new(3);
		let movesCount = 0;
		let esLength = 0;
		return this;
	}

	/** Disposes this game. */
	method void dispose() {
		do square.dispose();
		do Memory.deAlloc(this);
		return;
	}

	/** Moves the square in the current direction. */
	method void moveSquare() {
		var int esIndex;
		var Square es;
		if (direction = 1) { do square.moveUp(); }
		if (direction = 2) { do square.moveDown(); }
		if (direction = 3) { do square.moveLeft(); }
		if (direction = 4) { do square.moveRight(); }
		if (movesCount = 10) { let edibleSquares[0] = Square.new(0, 0, 5); let esLength = esLength + 1; }
		if (movesCount = 30) { let edibleSquares[1] = Square.new(0, 0, 5); let esLength = esLength + 1; }
		if (movesCount = 40) { let edibleSquares[2] = Square.new(0, 0, 5); let esLength = esLength + 1; }
		let movesCount = movesCount + 1;
		let esIndex = 0;
		while (esIndex < esLength) {
			let es = edibleSquares[esIndex];
			if (square.isInside(es.getx(), es.gety(), es.getsize()) & es.isActive()) {
				do square.incSize();
				do es.inactivate();
			}

			if (~es.isActive() & ~square.isInside(es.gety(), es.getx(), es.getsize())) {
				do es.relocate(square.gety(), square.getx());
				do es.activate();
			}
			let esIndex = esIndex + 1;
		}
		do Sys.wait(5);	// delays the next movement
		return;
	}

	/** Runs the game: handles the user's inputs and moves the square accordingly */
	method void run() {
		var char key;	// the key currently pressed by the user
		var boolean exit;
		let exit = false;

		while (~exit) {
			// waits for a key to be pressed
			while (key = 0) {
				let key = Keyboard.keyPressed();
				do moveSquare();
			}
			if (key = 81)	{ let exit = true; }	 // q key
			if (key = 90)	{ do square.decSize(); } // z key
			if (key = 88)	{ do square.incSize(); } // x key
			if (key = 131) { let direction = 1; }	// up arrow
			if (key = 133) { let direction = 2; }	// down arrow
			if (key = 130) { let direction = 3; }	// left arrow
			if (key = 132) { let direction = 4; }	// right arrow

			// waits for the key to be released
			while (~(key = 0)) {
				let key = Keyboard.keyPressed();
				do moveSquare();
			}
		}
		return;
	}
}
